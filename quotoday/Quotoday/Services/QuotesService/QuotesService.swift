//
//  QuotesService.swift
//  quotoday
//
//  Created by Aleksandr Meshchenko on 02.08.25.
//

import Foundation

// MARK: - QuotesService
class QuotesService {
    static let shared = QuotesService()
    
    private let baseURL = "https://api.api-ninjas.com/v1/quotes"
    private let apiKey: String
    private let session: URLSession
    
    private init() {
        // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ Info.plist –∏–ª–∏ Environment
        if let path = Bundle.main.path(forResource: "Config", ofType: "plist"),
           let config = NSDictionary(contentsOfFile: path),
           let key = config["API_NINJAS_KEY"] as? String {
            self.apiKey = key
        } else {
            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å –∫–ª—é—á
            self.apiKey = "YOUR_API_KEY_HERE"
            print("Warning: Using hardcoded API key. Please add Config.plist with API_NINJAS_KEY")
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ URLSession —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        let configuration = URLSessionConfiguration.default
        configuration.timeoutIntervalForRequest = 30
        configuration.timeoutIntervalForResource = 30
        self.session = URLSession(configuration: configuration)
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–∏—Ç–∞—Ç –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    func fetchQuotes(categories: Set<APICategory>, count: Int) async throws -> [Quote] {
        var quotes: [Quote] = []
        var attempts = 0
        let maxAttempts = count * 10 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        
        // DEBUG: –ü–æ–∫–∞–∂–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
         let categoryNames = categories.map(\.rawValue).joined(separator: ", ")
         print("‚û°Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ \(count) —Ü–∏—Ç–∞—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: [\(categoryNames)]")

        while quotes.count < count && attempts < maxAttempts {
            attempts += 1
            
            do {
                // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
                if let quote = try await fetchRandomQuote() {
                    print("üîç –ü–æ–ø—ã—Ç–∫–∞ \(attempts): \(quote.category) ‚Äî \"\(quote.text.prefix(40))...\"")
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                    if categories.isEmpty || categories.contains(where: { $0.rawValue == quote.category.lowercased() }) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ü–∏—Ç–∞—Ç—ã
                        if !quotes.contains(where: { $0.text == quote.text }) {
                            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ü–∏—Ç–∞—Ç–∞ –æ—Ç \(quote.author)")
                            quotes.append(quote)
                        } else {
                            print("‚Ü©Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è —Ü–∏—Ç–∞—Ç–∞")
                        }
                    } else {
                        print("‚õîÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫: \(quote.category)")
                    }
                }
            } catch {
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã: \(error)")
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç
        if quotes.isEmpty {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ü–∏—Ç–∞—Ç—ã.")
            throw QuotesError.noQuotesFound
        }
        
        print("üéâ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(quotes.count) —Ü–∏—Ç–∞—Ç –ø–æ—Å–ª–µ \(attempts) –ø–æ–ø—ã—Ç–æ–∫.")
        return quotes
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞)
    func fetchQuote(category: String) async throws -> Quote? {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ü–∏—Ç–∞—Ç—É –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—é–±—É—é
        return try await fetchRandomQuote()
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–∏—Ç–∞—Ç
    func fetchRandomQuotes(count: Int) async throws -> [Quote] {
        var quotes: [Quote] = []
        
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ü–∏—Ç–∞—Ç—É –∑–∞ —Ä–∞–∑, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        await withTaskGroup(of: Quote?.self) { group in
            for _ in 0..<count {
                group.addTask {
                    try? await self.fetchRandomQuote()
                }
            }
            
            for await quote in group {
                if let quote = quote {
                    quotes.append(quote)
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑ –∫—ç—à–∞ –∏–ª–∏ fallback
        if quotes.isEmpty {
            throw QuotesError.noQuotesFound
        }
        
        return quotes
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã
    func fetchRandomQuote() async throws -> Quote? {
        let url = URL(string: baseURL)!
        let quote = try await performRequest(url: url)
        return quote
    }
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    private func performRequest(url: URL) async throws -> Quote? {
        var request = URLRequest(url: url)
        request.setValue(apiKey, forHTTPHeaderField: "X-Api-Key")
        request.httpMethod = "GET"
        request.timeoutInterval = 10
        
        do {
            let (data, response) = try await session.data(for: request)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if let httpResponse = response as? HTTPURLResponse {
                switch httpResponse.statusCode {
                case 200:
                    break // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                case 401:
                    throw QuotesError.unauthorized
                case 429:
                    throw QuotesError.rateLimitExceeded
                default:
                    throw QuotesError.serverError(statusCode: httpResponse.statusCode)
                }
            }
            
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            let apiQuotes = try JSONDecoder().decode([APIQuote].self, from: data)
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞—à—É –º–æ–¥–µ–ª—å
            return apiQuotes.first.map { apiQuote in
                Quote(
                    text: apiQuote.quote.trimmingCharacters(in: .whitespacesAndNewlines),
                    author: apiQuote.author.trimmingCharacters(in: .whitespacesAndNewlines),
                    category: apiQuote.category
                )
            }
            
        } catch let error as DecodingError {
            print("Decoding error: \(error)")
            throw QuotesError.decodingFailed
        } catch {
            print("Network error: \(error)")
            throw error
        }
    }
}

